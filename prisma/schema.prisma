// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"

  url = env("DATABASE_URL") // uses connection pooling
}

// Describes a single item in inventory 
model Item {
  id        Int         @id @default(autoincrement())
  itemName  String
  quantity  Int
  price     Float
  OrderItem OrderItem[]
}

// Describes a single order made by a user 
model Order {
  id         Int         @id @default(autoincrement())
  status     String
  totalPrice Float
  items      OrderItem[]
  userId     Int?
  User       User?       @relation(fields: [userId], references: [id])
}

// Describe a single item in an order 
model OrderItem {
  id           Int    @id @default(autoincrement())
  order        Order  @relation(fields: [orderId], references: [id])
  orderId      Int
  itemName     String
  itemQuantity Int
  itemID       Int
  item         Item   @relation(fields: [itemID], references: [id])
}

// User schema
model User {
  id                 Int                  @id @default(autoincrement())
  email              String               @unique
  password           String
  firstName          String?
  lastName           String?
  orders             Order[]
  questionnaireEntry QuestionnaireEntry[]
}

enum QStatus {
  QUEUED
  IN_PROGRESS
  COMPLETED
}

model QuestionnaireEntry {
  //id is uuid to make it harder to guess
  id                 String   @id @default(uuid())
  email              String
  minBudget          Int
  maxBudget          Int
  usage              String
  usageDetails       String
  performance        String
  performanceDetails String
  aesthetics         String
  aestheticsDetails  String
  other              String
  User               User?    @relation(fields: [userId], references: [id]) //optional User
  userId             Int?
  date               DateTime @default(now())
  status             QStatus  @default(QUEUED)
}
